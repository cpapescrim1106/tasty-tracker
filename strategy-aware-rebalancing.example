#!/usr/bin/env python3
"""
Strategy-Aware Portfolio Rebalancing System
Integrates position strategies with allocation rules for intelligent rebalancing
"""

import time
import logging
from datetime import datetime
from typing import Dict, Any, List, Optional, Tuple
from collections import defaultdict

from enhanced_position_strategy_storage import (
    EnhancedStrategyPositionStorage, 
    PositionStrategyType
)
from position_chain_detector import PositionChainDetector
from allocation_rules_manager import AllocationRulesManager

class StrategyAwareAnalyzer:
    """Analyzes portfolio with strategy awareness"""
    
    def __init__(self, storage: EnhancedStrategyPositionStorage, 
                 delta_tracker, chain_detector: PositionChainDetector):
        self.storage = storage
        self.tracker = delta_tracker
        self.chain_detector = chain_detector
        self.logger = logging.getLogger(__name__)
        
    def analyze_portfolio_complete(self, account_numbers: Optional[List[str]] = None) -> Dict[str, Any]:
        """Complete portfolio analysis with strategy detection"""
        
        start_time = time.time()
        
        # Step 1: Get live positions
        with self.tracker.positions_lock:
            live_positions = dict(self.tracker.positions)
            
        # Step 2: Detect and store strategies
        position_list = list(live_positions.values())
        detected_strategies = self.storage.detect_and_store_strategy(
            position_list, self.chain_detector
        )
        
        # Step 3: Get enhanced positions with strategy info
        enhanced_positions = self.storage.get_positions_with_dynamic_data(
            account_numbers, live_positions
        )
        
        # Step 4: Calculate allocations including strategy allocation
        allocations = self._calculate_comprehensive_allocations(enhanced_positions)
        
        # Step 5: Get strategy insights
        strategy_insights = self._analyze_strategy_distribution(enhanced_positions)
        
        elapsed_ms = (time.time() - start_time) * 1000
        
        return {
            'positions': enhanced_positions,
            'allocations': allocations,
            'strategy_insights': strategy_insights,
            'detected_strategies': len(detected_strategies),
            'processing_time_ms': elapsed_ms,
            'timestamp': datetime.now().isoformat()
        }
        
    def _calculate_comprehensive_allocations(self, positions: List[Dict[str, Any]]) -> Dict[str, Any]:
        """Calculate all allocation types including strategy"""
        
        total_value = sum(p['market_value'] for p in positions 
                         if not p['exclude_from_rebalancing'])
        
        if total_value == 0:
            return {
                'asset_allocation': {},
                'strategy_allocation': {},
                'duration_allocation': {},
                'strategy_type_allocation': {},
                'sector_allocation': {}
            }
            
        allocations = defaultdict(lambda: defaultdict(float))
        
        for pos in positions:
            if pos['exclude_from_rebalancing']:
                continue
                
            value = pos['market_value']
            pct = (value / total_value) * 100
            
            # Asset allocation
            allocations['asset_allocation'][pos['asset_category']] += pct
            
            # Strategy category (bullish/bearish/neutral)
            allocations['strategy_allocation'][pos['strategy_category']] += pct
            
            # Duration allocation
            allocations['duration_allocation'][pos['duration_category']] += pct
            
            # Strategy type allocation (put_credit_spread, etc.)
            strategy_type = pos.get('strategy_type', 'unassigned')
            allocations['strategy_type_allocation'][strategy_type] += pct
            
            # Sector allocation
            allocations['sector_allocation'][pos.get('sector', 'Other')] += pct
            
        return dict(allocations)
        
    def _analyze_strategy_distribution(self, positions: List[Dict[str, Any]]) -> Dict[str, Any]:
        """Analyze strategy distribution and risk metrics"""
        
        insights = {
            'total_strategies': 0,
            'strategies_by_type': defaultdict(int),
            'strategies_by_underlying': defaultdict(int),
            'single_positions': 0,
            'risk_metrics': {}
        }
        
        # Count unique strategies
        unique_strategies = set()
        single_positions = []
        
        for pos in positions:
            if pos.get('strategy_id'):
                unique_strategies.add(pos['strategy_id'])
                insights['strategies_by_type'][pos.get('strategy_type', 'unknown')] += 1
                insights['strategies_by_underlying'][pos['underlying_symbol']] += 1
            else:
                single_positions.append(pos)
                
        insights['total_strategies'] = len(unique_strategies)
        insights['single_positions'] = len(single_positions)
        
        # Calculate risk metrics
        total_delta = sum(p['delta'] * p['quantity'] for p in positions)
        total_value = sum(p['market_value'] for p in positions)
        
        insights['risk_metrics'] = {
            'total_portfolio_delta': total_delta,
            'delta_per_10k': (total_delta / total_value * 10000) if total_value > 0 else 0,
            'strategies_with_protection': sum(1 for s in unique_strategies if 'spread' in s.lower()),
            'naked_positions': len([p for p in single_positions if 'option' in p.get('instrument_type', '').lower()])
        }
        
        return dict(insights)

class StrategyAwareRebalancer:
    """Rebalancer that considers position strategies"""
    
    def __init__(self, analyzer: StrategyAwareAnalyzer, 
                 rules_manager: AllocationRulesManager,
                 screener_engine):
        self.analyzer = analyzer
        self.rules_manager = rules_manager
        self.screener = screener_engine
        self.logger = logging.getLogger(__name__)
        
    def generate_strategy_aware_recommendations(self, 
                                              account_numbers: Optional[List[str]] = None) -> Dict[str, Any]:
        """Generate recommendations considering existing strategies"""
        
        # Analyze current portfolio with strategies
        analysis = self.analyzer.analyze_portfolio_complete(account_numbers)
        
        # Check compliance
        total_value = sum(p['market_value'] for p in analysis['positions'])
        compliance_checks = self.rules_manager.check_compliance(
            analysis['allocations'], total_value
        )
        
        # Identify gaps
        available_bp = self._get_available_buying_power(account_numbers)
        gaps = self.rules_manager.identify_allocation_gaps(
            analysis['allocations'], total_value, available_bp
        )
        
        # Generate recommendations with strategy awareness
        recommendations = self._generate_smart_recommendations(
            gaps, analysis['strategy_insights'], analysis['positions']
        )
        
        return {
            'analysis': analysis,
            'compliance_checks': compliance_checks,
            'gaps': gaps,
            'recommendations': recommendations,
            'timestamp': datetime.now().isoformat()
        }
        
    def _generate_smart_recommendations(self, gaps: List[Any], 
                                      strategy_insights: Dict[str, Any],
                                      current_positions: List[Dict[str, Any]]) -> List[Dict[str, Any]]:
        """Generate recommendations considering existing strategies"""
        
        recommendations = []
        
        # Group current positions by underlying
        positions_by_underlying = defaultdict(list)
        for pos in current_positions:
            positions_by_underlying[pos['underlying_symbol']].append(pos)
            
        for gap in gaps:
            # Skip if gap is too small
            if abs(gap.gap_pct) < 2.0:
                continue
                
            # Determine appropriate action based on gap type
            if gap.gap_pct > 0:  # Need to increase allocation
                # Check if we should add to existing positions or open new ones
                rec_type = self._determine_recommendation_type(
                    gap, positions_by_underlying, strategy_insights
                )
                
                if rec_type == 'add_to_existing':
                    # Recommend adding to existing strategies
                    recs = self._recommend_additions_to_existing(gap, positions_by_underlying)
                    recommendations.extend(recs)
                else:
                    # Recommend new positions
                    recs = self._recommend_new_positions(gap)
                    recommendations.extend(recs)
                    
            else:  # Need to decrease allocation
                # Recommend closing or reducing positions
                recs = self._recommend_position_reductions(gap, current_positions)
                recommendations.extend(recs)
                
        return recommendations
        
    def _determine_recommendation_type(self, gap, positions_by_underlying, 
                                     strategy_insights) -> str:
        """Determine whether to add to existing or open new positions"""
        
        # If we have existing positions in the category, prefer adding
        if gap.category in ['bullish', 'bearish', 'neutral']:
            # Check if we have existing strategies of this type
            relevant_strategies = strategy_insights['strategies_by_type']
            if self._has_matching_strategies(gap.category, relevant_strategies):
                return 'add_to_existing'
                
        return 'open_new'
        
    def _has_matching_strategies(self, category: str, strategies_by_type: Dict[str, int]) -> bool:
        """Check if we have strategies matching the category"""
        
        bullish_strategies = ['put_credit_spread', 'call_debit_spread', 'long_call']
        bearish_strategies = ['call_credit_spread', 'put_debit_spread', 'long_put']
        neutral_strategies = ['iron_condor', 'iron_butterfly', 'straddle', 'strangle']
        
        if category == 'bullish':
            return any(strategies_by_type.get(s, 0) > 0 for s in bullish_strategies)
        elif category == 'bearish':
            return any(strategies_by_type.get(s, 0) > 0 for s in bearish_strategies)
        elif category == 'neutral':
            return any(strategies_by_type.get(s, 0) > 0 for s in neutral_strategies)
            
        return False
        
    def _recommend_additions_to_existing(self, gap, positions_by_underlying) -> List[Dict[str, Any]]:
        """Recommend adding to existing positions"""
        
        recommendations = []
        
        # Find underlyings with existing positions matching the gap category
        for underlying, positions in positions_by_underlying.items():
            # Check if positions match the gap category
            if self._positions_match_category(positions, gap.category):
                rec = {
                    'action': 'add_to_existing',
                    'underlying': underlying,
                    'category': gap.category,
                    'current_allocation': sum(p['market_value'] for p in positions),
                    'recommended_addition': gap.required_allocation_dollars * 0.2,  # 20% of gap
                    'reason': f"Add to existing {gap.category} position in {underlying}",
                    'priority': gap.priority
                }
                recommendations.append(rec)
                
                # Limit to top 3 additions
                if len(recommendations) >= 3:
                    break
                    
        return recommendations
        
    def _positions_match_category(self, positions: List[Dict[str, Any]], category: str) -> bool:
        """Check if positions match the allocation category"""
        
        # Check strategy categories
        position_categories = [p.get('strategy_category') for p in positions]
        
        if category in ['bullish', 'bearish', 'neutral']:
            return category in position_categories
        elif category == 'equities':
            return any(p['asset_category'] == 'equity' for p in positions)
        elif category == 'non_equities':
            return any(p['asset_category'] == 'equity_option' for p in positions)
            
        # For duration categories
        return any(p.get('duration_category') == category for p in positions)
        
    def _recommend_new_positions(self, gap) -> List[Dict[str, Any]]:
        """Recommend new positions to fill gaps"""
        
        # This would integrate with your screener to find opportunities
        # For now, return a template recommendation
        
        return [{
            'action': 'open_new',
            'category': gap.category,
            'target_allocation': gap.required_allocation_dollars,
            'strategy_suggestion': self._suggest_strategy_for_category(gap.category),
            'reason': f"Open new {gap.category} position to fill {gap.gap_pct:.1f}% gap",
            'priority': gap.priority
        }]
        
    def _suggest_strategy_for_category(self, category: str) -> str:
        """Suggest appropriate strategy for category"""
        
        suggestions = {
            'bullish': 'put_credit_spread',
            'bearish': 'call_credit_spread',
            'neutral': 'iron_condor',
            '22-45_dte': 'credit_spread',
            '0-7_dte': 'close_position'
        }
        
        return suggestions.get(category, 'evaluate_opportunities')
        
    def _recommend_position_reductions(self, gap, positions: List[Dict[str, Any]]) -> List[Dict[str, Any]]:
        """Recommend position reductions for over-allocation"""
        
        # Find positions in the over-allocated category
        relevant_positions = [
            p for p in positions 
            if self._position_matches_gap_category(p, gap.category)
        ]
        
        # Sort by various criteria (profit, DTE, etc.)
        relevant_positions.sort(key=lambda p: (
            p.get('dte', 999),  # Close shorter DTE first
            -p.get('market_value', 0)  # Then larger positions
        ))
        
        recommendations = []
        remaining_reduction = abs(gap.required_allocation_dollars)
        
        for pos in relevant_positions:
            if remaining_reduction <= 0:
                break
                
            rec = {
                'action': 'reduce_position',
                'position_key': pos['position_key'],
                'symbol': pos['symbol'],
                'current_value': pos['market_value'],
                'recommended_reduction': min(pos['market_value'], remaining_reduction),
                'reason': f"Reduce {gap.category} allocation by {abs(gap.gap_pct):.1f}%",
                'priority': gap.priority
            }
            
            recommendations.append(rec)
            remaining_reduction -= pos['market_value']
            
        return recommendations
        
    def _position_matches_gap_category(self, position: Dict[str, Any], category: str) -> bool:
        """Check if position matches gap category"""
        
        if category in ['bullish', 'bearish', 'neutral']:
            return position.get('strategy_category') == category
        elif category == 'equities':
            return position['asset_category'] == 'equity'
        elif category == 'non_equities':
            return position['asset_category'] == 'equity_option'
        else:
            # Duration categories
            return position.get('duration_category') == category
            
    def _get_available_buying_power(self, account_numbers: List[str]) -> float:
        """Get available buying power"""
        # Implementation would get from tracker
        return 10000  # Placeholder

# Flask route integration
def create_strategy_aware_routes(app, delta_tracker, storage, rules_manager):
    """Create routes for strategy-aware rebalancing"""
    
    # Initialize components
    chain_detector = PositionChainDetector()
    analyzer = StrategyAwareAnalyzer(storage, delta_tracker, chain_detector)
    rebalancer = StrategyAwareRebalancer(analyzer, rules_manager, None)
    
    @app.route('/api/rebalancing/analyze-with-strategies', methods=['POST'])
    def analyze_with_strategies():
        """Analyze portfolio with strategy detection"""
        try:
            data = request.get_json() or {}
            account_numbers = data.get('account_numbers')
            
            # Perform analysis
            analysis = analyzer.analyze_portfolio_complete(account_numbers)
            
            return {
                'success': True,
                'analysis': analysis,
                'message': f"Detected {analysis['detected_strategies']} strategies"
            }
            
        except Exception as e:
            return {'success': False, 'error': str(e)}, 500
            
    @app.route('/api/rebalancing/recommendations-smart', methods=['POST'])
    def get_smart_recommendations():
        """Get strategy-aware recommendations"""
        try:
            data = request.get_json() or {}
            account_numbers = data.get('account_numbers')
            
            # Generate recommendations
            result = rebalancer.generate_strategy_aware_recommendations(account_numbers)
            
            return {
                'success': True,
                'recommendations': result['recommendations'],
                'gaps': [
                    {
                        'category': gap.category,
                        'current_pct': gap.current_pct,
                        'target_pct': gap.target_pct,
                        'gap_pct': gap.gap_pct,
                        'required_dollars': gap.required_allocation_dollars
                    }
                    for gap in result['gaps']
                ],
                'strategy_insights': result['analysis']['strategy_insights']
            }
            
        except Exception as e:
            return {'success': False, 'error': str(e)}, 500